21/04/2015: Combine absolute_number updates and fraction updates.

	<after>
	def init_up_frac(G, n):
		if type(n) == float: # Update n FRACTION of nodes
			for i in G:
				if rho < rd.random():
					G.node[i]['state'] = 0
				else:
					G.node[i]['state'] = 1

		
		elif type(n) == int: # Update n NUMBER of nodes
			for i in G:
				G.node[i]['state'] = 0

			r = rd.choice(G.nodes())
			for i in range(n):
				G.node[r]['state'] = 1
				r = rd.choice(G.nodes())
				if len(G) < n:
					print 'Error:The number of nodes lower than the number of seed nodes.'
					sys.exit()
				elif len(G) == n:
					G.node[G.nodes()[i]]['state'] = 1
				else:
					while G.node[r]['state'] == 1:
						r = rd.choice(G.nodes())
						if G.node[r]['state'] == 0:
							break






09/02/2015: Choose nodes from node list, not from random integer between 0 and len(G)-1.
Reason: If the nodes are NOT numbered from 0 to len(G)-1 -- because Gcc = nx.convert_node_labels_to_integers(Gcc, first_label = 0) is muted --, then the past code causes error, as the random integer is picked uniformly at random within the range between 0 and len(G)-1.

	<before>
	r = rd.randint(0,len(G)-1)
		for i in range(n):
			G.node[r]['state'] = 1
			r = rd.randint(0,len(G)-1)
			if len(G) == n:
				G.node[i]['state'] = 1
			else:
				while G.node[r]['state'] == 1:
					r = rd.randint(0,len(G)-1)
					if G.node[r]['state'] == 0:
						break
						
	<after>
	r = rd.choice(G.nodes())
	for i in range(n):
		G.node[r]['state'] = 1
		r = rd.choice(G.nodes())
		if len(G) == n:
			G.node[G.nodes()[i]]['state'] = 1
		else:
			while G.node[r]['state'] == 1:
				r = rd.choice(G.nodes())
				if G.node[r]['state'] == 0:
					break




09/02/2015: before, n should always be smaller than len(G), but now n can be as big as len(G).

	<before>

	r = rd.randint(0,len(G)-1)
	while G.node[r]['state'] == 1:
		r = rd.randint(0,len(G)-1)
		if G.node[r]['state'] == 0:
			break



	<after>

	r = rd.randint(0,len(G)-1)
	if len(G) == n:
		G.node[i]['state'] = 1
	else:
		while G.node[r]['state'] == 1:
			r = rd.randint(0,len(G)-1)
			if G.node[r]['state'] == 0:
				break




09/02/2015: Run while loop iff the size of G is larger than 1.
Reason: if len(G) is 1, then r = rd.randint(0,len(G)-1) only gives 0, which makes while loop run forever. So far, there was no problem detected because I usually gave heterogeneous thresholds to nodes so that some nodes are naturally seed nodes, but if the nodes have homogeneous thresholds, then 

	<before>

	while G.node[r]['state'] == 1:
		r = rd.randint(0,len(G)-1)
		if G.node[r]['state'] == 0:
			break


	<After>

	if len(G) > 1:
		while G.node[r]['state'] == 1:
			r = rd.randint(0,len(G)-1)
			if G.node[r]['state'] == 0:
				break



08/02/2015: Created two different ways to update seed nodes: update absolute number of nodes (init_up_frac_num), and update seed nodes with certain probability (init_up_frac_prob).



22/01/2015: Major change of the dynamical process: make use of the dictionary of G.node, as a dictionary of nodal attributes.


	<before>
	G.node[i] only represented state of a node, while its default format is actually a DICTIONARY, that can contain different kinds of nodal attribute.

	import random as rd

	def init_up_frac(G, rho):
		for i in G:
			G.node[i]['state'] = 0

		r = rd.randint(0,len(G)-1)
		for i in range(int(rho*(len(G)))):
			G.node[r]['state'] = 1
			r = rd.randint(0,len(G)-1)
			while G.node[r]['state'] == 1:
				r = rd.randint(0,len(G)-1)
				if G.node[r]['state'] == 0:
					break




	<after>

	import random as rd

	def init_up_frac(G, rho):
		for i in G.nodes():
			G.node[i] = 0

		r = rd.randint(0,len(G)-1)
		for i in range(int(rho*(len(G)))):
			G.node[r] = 1
			r = rd.randint(0,len(G)-1)
			while G.node[r] == 1:
				r = rd.randint(0,len(G)-1)
				if G.node[r] == 0:
					break

